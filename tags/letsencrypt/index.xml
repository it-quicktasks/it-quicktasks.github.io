<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>letsencrypt on IT Quicktasks</title>
    <link>https://www.it-quicktasks.com/tags/letsencrypt/</link>
    <description>Recent content in letsencrypt on IT Quicktasks</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 07 Jun 2020 00:20:25 +0800</lastBuildDate>
    
	<atom:link href="https://www.it-quicktasks.com/tags/letsencrypt/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Formerly using nginx, Moving to Apache won&#39;t Renew Cert</title>
      <link>https://www.it-quicktasks.com/renew-from-nginx-to-apache/</link>
      <pubDate>Sun, 07 Jun 2020 00:20:25 +0800</pubDate>
      
      <guid>https://www.it-quicktasks.com/renew-from-nginx-to-apache/</guid>
      <description>It&amp;rsquo;s quite expected that certificate won&amp;rsquo;t renew as the automation has been broken. What you can do is install the apache version of certbot
yum install python-certbot-apache  and re-issue the certificate
sudo certbot --apache -d www.example.org  </description>
    </item>
    
    <item>
      <title>Hardened TLS / SSL Cert</title>
      <link>https://www.it-quicktasks.com/hardened-ssl-cert/</link>
      <pubDate>Sun, 07 Jun 2020 00:20:25 +0800</pubDate>
      
      <guid>https://www.it-quicktasks.com/hardened-ssl-cert/</guid>
      <description>Apache
SSLCipherSuite EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH:ECDHE-RSA-AES128-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA128:DHE-RSA-AES128-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES128-GCM-SHA128:ECDHE-RSA-AES128-SHA384:ECDHE-RSA-AES128-SHA128:ECDHE-RSA-AES128-SHA:ECDHE-RSA-AES128-SHA:DHE-RSA-AES128-SHA128:DHE-RSA-AES128-SHA128:DHE-RSA-AES128-SHA:DHE-RSA-AES128-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES128-GCM-SHA384:AES128-GCM-SHA128:AES128-SHA128:AES128-SHA128:AES128-SHA:AES128-SHA:DES-CBC3-SHA:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!MD5:!PSK:!RC4 SSLProtocol All -SSLv2 -SSLv3 SSLHonorCipherOrder On Header always set Strict-Transport-Security &amp;quot;max-age=63072000; includeSubdomains; preload&amp;quot; Header always set X-Frame-Options SAMEORIGIN Header always set X-Content-Type-Options nosniff # Requires Apache &amp;gt;= 2.4 SSLCompression off SSLSessionTickets Off SSLUseStapling on SSLStaplingCache &amp;quot;shmcb:logs/stapling-cache(150000)&amp;quot;  Nginx
ssl_ciphers &amp;quot;EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH:ECDHE-RSA-AES128-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA128:DHE-RSA-AES128-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES128-GCM-SHA128:ECDHE-RSA-AES128-SHA384:ECDHE-RSA-AES128-SHA128:ECDHE-RSA-AES128-SHA:ECDHE-RSA-AES128-SHA:DHE-RSA-AES128-SHA128:DHE-RSA-AES128-SHA128:DHE-RSA-AES128-SHA:DHE-RSA-AES128-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES128-GCM-SHA384:AES128-GCM-SHA128:AES128-SHA128:AES128-SHA128:AES128-SHA:AES128-SHA:DES-CBC3-SHA:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!MD5:!PSK:!RC4&amp;quot;; ssl_protocols TLSv1 TLSv1.1 TLSv1.2; ssl_prefer_server_ciphers on; ssl_session_cache shared:SSL:10m; # &#39;always&#39; requires nginx &amp;gt;= 1.7.5, see http://nginx.org/en/docs/http/ngx_http_headers_module.html#add_header add_header Strict-Transport-Security &amp;quot;max-age=63072000; includeSubdomains; preload&amp;quot; always; add_header X-Frame-Options SAMEORIGIN always; add_header X-Content-Type-Options nosniff always; ssl_session_tickets off; ssl_stapling on; # Requires nginx &amp;gt;= 1.</description>
    </item>
    
    <item>
      <title>Install LetsEncrypt in Ubuntu</title>
      <link>https://www.it-quicktasks.com/install-letsencrypt-ubuntu/</link>
      <pubDate>Sun, 07 Jun 2020 00:20:25 +0800</pubDate>
      
      <guid>https://www.it-quicktasks.com/install-letsencrypt-ubuntu/</guid>
      <description>sudo add-apt-repository ppa:certbot/certbot sudo apt-get update sudo apt-get install python-certbot-apache sudo certbot --apache -d one.example.com -d two.example.com  If the above don&amp;rsquo;t work, try this:
sudo apt-get update sudo apt-get install software-properties-common sudo add-apt-repository universe sudo add-apt-repository ppa:certbot/certbot sudo apt-get update sudo apt-get install certbot python-certbot-nginx  Put the following in root crontab (sudo crontab -e)
30 2 * * * /usr/bin/certbot renew &amp;gt;&amp;gt; /var/log/letsencrypt-renew.log  Some details in https://www.digitalocean.com/community/tutorials/how-to-secure-apache-with-let-s-encrypt-on-ubuntu-16-04</description>
    </item>
    
    <item>
      <title>Manually generating LetsEncrypt certificate</title>
      <link>https://www.it-quicktasks.com/manually-generate-letsencryp-cert/</link>
      <pubDate>Sun, 07 Jun 2020 00:20:25 +0800</pubDate>
      
      <guid>https://www.it-quicktasks.com/manually-generate-letsencryp-cert/</guid>
      <description>In cases where you don&amp;rsquo;t want to disrupt current production server, this is a good approach
mkdir /opt/letsencrypt cd /opt/letsencrypt wget https://dl.eff.org/certbot-auto chmod a+x certbot-auto sudo ./certbot-auto --apache certonly  Sample run as follows:
[root@687elmp01 letsencrypt]# sudo ./certbot-auto --apache certonly Saving debug log to /var/log/letsencrypt/letsencrypt.log Plugins selected: Authenticator apache, Installer apache Enter email address (used for urgent renewal and security notices) (Enter &#39;c&#39; to cancel): me@example.com ------------------------------------------------------------------------------- Please read the Terms of Service at https://letsencrypt.</description>
    </item>
    
    <item>
      <title>Oneline Letsencrypt Cert Creation</title>
      <link>https://www.it-quicktasks.com/oneline-letsencrypt-cert-creation/</link>
      <pubDate>Sun, 07 Jun 2020 00:20:25 +0800</pubDate>
      
      <guid>https://www.it-quicktasks.com/oneline-letsencrypt-cert-creation/</guid>
      <description>certbot --apache -d sub1.example.com -d sub2.example.com --agree-tos -m you@example.com --redirect  If you&amp;rsquo;re on nginx, use --nginx</description>
    </item>
    
    <item>
      <title>Wildcard LetsEncrypt</title>
      <link>https://www.it-quicktasks.com/wildcard-letsencrypt/</link>
      <pubDate>Sun, 07 Jun 2020 00:20:25 +0800</pubDate>
      
      <guid>https://www.it-quicktasks.com/wildcard-letsencrypt/</guid>
      <description>yum install certbot.noarch -y certbot -d *.example.com \ --manual \ --preferred-challenges \ dns certonly \ --server https://acme-v02.api.letsencrypt.org/directory ... ... create the TXT DNS record  NOTE: In creating the cert, make sure to wait for 5minutes or better check in another terminal session if the txt record is now visible. Otherwise, cert creation will fail.
Some details in https://wicowen.github.io/2018-0315-1400-Enable-Lets-encrypt-wildcard-certificate-in-CentOS-7/
In Ubuntu/Debian check https://medium.com/@saurabh6790/generate-wildcard-ssl-certificate-using-lets-encrypt-certbot-273e432794d7
30 2 * * * /usr/bin/certbot renew &amp;gt;&amp;gt; /var/log/letsencrypt-renew.</description>
    </item>
    
  </channel>
</rss>